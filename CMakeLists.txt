CMAKE_MINIMUM_REQUIRED (VERSION 2.8)
SET(CMAKE_VERBOSE_MAKEFILE ON)

SET(APN_LIB_NAME "capn")
PROJECT("libcapn" C)

SET(APN_VERSION_MAJOR 1)
SET(APN_VERSION_MINOR 0)
SET(APN_VERSION_PATCH 0)

SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMake")

INCLUDE (CheckFunctionExists)
INCLUDE (CheckIncludeFiles)
INCLUDE (CheckSymbolExists)
INCLUDE (CheckTypeSize)

SET(APN_VERSION "${APN_VERSION_MAJOR}.${APN_VERSION_MINOR}.${APN_VERSION_PATCH}")
SET(PROJECT_VERSION ${APN_VERSION})

IF(CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_C_FLAGS "-std=c99 -D_BSD_SOURCE")
    SET(CMAKE_C_FLAGS_DEBUG "-Wall -Wextra -Wimplicit -Werror")
    SET(CMAKE_C_FLAGS_RELEASE "")
ELSE(CMAKE_COMPILER_IS_GNUCXX)

ENDIF(CMAKE_COMPILER_IS_GNUCXX)

IF(NOT DEFINED CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE "Release")
ENDIF(NOT DEFINED CMAKE_BUILD_TYPE)

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE}")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE}")

INCLUDE_DIRECTORIES ("${CMAKE_CURRENT_SOURCE_DIR}/src")
INCLUDE_DIRECTORIES ("${PROJECT_BINARY_DIR}")

CHECK_INCLUDE_FILES (inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILES (stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILES (malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILES (unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILES (netinet/in.h HAVE_NETINET_IN_H)
CHECK_INCLUDE_FILES (arpa/inet.h HAVE_ARPA_INET_H)
CHECK_INCLUDE_FILES (netdb.h HAVE_NETDB_H)
CHECK_INCLUDE_FILES (sys/socket.h HAVE_SYS_SOCKET_H)

INCLUDE(ExternalProject)

ExternalProject_Add(
    jansson
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/jansson"
    #GIT_REPOSITORY git://github.com/akheron/jansson.git
    BINARY_DIR "${CMAKE_CURRENT_SOURCE_DIR}/jansson"
    INSTALL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/jansson"
    CMAKE_COMMAND cmake .
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
)

INCLUDE_DIRECTORIES ("${CMAKE_CURRENT_SOURCE_DIR}/jansson")
INCLUDE_DIRECTORIES ("${CMAKE_CURRENT_SOURCE_DIR}/jansson/include")

CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/src/platform.h.cmake" "${CMAKE_CURRENT_SOURCE_DIR}/src/platform.h")
CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/src/version.h.cmake" "${CMAKE_CURRENT_SOURCE_DIR}/src/version.h")

IF(UNIX)
    INCLUDE (FindOpenSSL)
        IF(NOT OPENSSL_FOUND)
            MESSAGE(FATAL_ERROR "openssl is not found!")
        ENDIF(NOT OPENSSL_FOUND)
        INCLUDE_DIRECTORIES ( ${OPENSSL_INCLUDE_DIRS} )

    SET(APN_INSTALL_PATH_PKGCONFIG "/usr/lib/pkgconfig")
    SET(APN_INSTALL_PATH_LIB "lib")
    
    IF(LIB_SUFFIX)
	    SET(APN_INSTALL_PATH_LIB "lib${LIB_SUFFIX}")
    ELSE(LIB_SUFFIX)
        IF(APN_ARCH_X86_64 AND OS_LINUX)
                IF(EXISTS "${CMAKE_INSTALL_PREFIX}/lib64" AND IS_DIRECTORY "${CMAKE_INSTALL_PREFIX}/lib64")
                    SET(APN_INSTALL_PATH_LIB "lib64")
                    SET(APN_INSTALL_PATH_PKGCONFIG "/usr/lib64/pkgconfig")
                ENDIF(EXISTS "${CMAKE_INSTALL_PREFIX}/lib64" AND IS_DIRECTORY "${CMAKE_INSTALL_PREFIX}/lib64")
        ENDIF(APN_ARCH_X86_64 AND OS_LINUX)
    ENDIF(LIB_SUFFIX)
    
    SET(APN_INSTALL_PATH_LIB "${APN_INSTALL_PATH_LIB}/${APN_LIB_NAME}")
    SET(APN_INSTALL_PATH_HEADERS "include/${APN_LIB_NAME}")
    SET(APN_INSTALL_PATH_BIN "bin")
    
    IF(DEFINED OS_FREEBSD)
	    SET(APN_INSTALL_PATH_PKGCONFIG "/usr/local/libdata/pkgconfig")
    ENDIF(DEFINED OS_FREEBSD)
    
    MARK_AS_ADVANCED(
        APN_INSTALL_PATH_PKGCONFIG
        APN_INSTALL_PATH_LIB
        APN_INSTALL_PATH_HEADERS
        APN_INSTALL_PATH_BIN
    )

    SET(APN_PKGCONF_FILE_NAME "libcapn.pc")
    CONFIGURE_FILE("${APN_PKGCONF_FILE_NAME}.cmake" ${PROJECT_BINARY_DIR}/${APN_PKGCONF_FILE_NAME})

    IF(DEFINED OS_FREEBSD)
        SET(APN_INSTALL_PATH_PKGCONFIG "/usr/local/libdata/pkgconfig")
    ENDIF(DEFINED OS_FREEBSD)

    INSTALL(FILES ${PROJECT_BINARY_DIR}/${APN_PKGCONF_FILE_NAME} DESTINATION ${APN_INSTALL_PATH_PKGCONFIG})
    
    IF(OS_LINUX)
	    SET(APN_LDCONF_FILE_NAME "libcapn-${APN_VERSION}-${APN_ARCH_STR}.conf")
	    MARK_AS_ADVANCED(APN_LDCONF_FILE_NAME)
	    CONFIGURE_FILE(${PROJECT_BINARY_DIR}/libcapn.ld.conf.cmake ${PROJECT_BINARY_DIR}/${APN_LDCONF_FILE_NAME})
	
	    IF(EXISTS "/etc/ld.so.conf.d" AND IS_DIRECTORY "/etc/ld.so.conf.d")
	        INSTALL(FILES ${PROJECT_BINARY_DIR}/${APN_LDCONF_FILE_NAME} DESTINATION "/etc/ld.so.conf.d")
	    ENDIF(EXISTS "/etc/ld.so.conf.d" AND IS_DIRECTORY "/etc/ld.so.conf.d")
	
    ENDIF(OS_LINUX)

ENDIF(UNIX)

SET(APN_INSTALL_FULL_PATH_LIB ${CMAKE_INSTALL_PREFIX}/${INSTALL_LIB_DIR})
MARK_AS_ADVANCED(APN_INSTALL_FULL_PATH_LIB)

FILE (GLOB JANSSON_SOURCE_FILES jansson/src/*.c)

SET(APN_SOURCE_FILES
    src/apn.c
    src/apn_strings.c
    ${JANSSON_SOURCE_FILES}
)

SET(APN_PUBLIC_HEADER_FILES
    src/apn.h
	src/platform.h
    src/version.h 
)

IF(DEFINED WIN32)
	SET(APN_INSTALL_DIR ${PROJECT_BINARY_DIR}/capn-bin)
    SET(APN_INSTALL_PATH_LIB ${APN_INSTALL_DIR}/lib)
    SET(APN_INSTALL_PATH_HEADERS ${APN_INSTALL_DIR}/include)
    SET(APN_INSTALL_PATH_BIN ${APN_INSTALL_DIR}/bin)
	
    IF (MINGW)
        # resource compilation for MinGW
        ADD_CUSTOM_COMMAND ( OUTPUT ${PROJECT_BINARY_DIR}/rc_capn.obj
        COMMAND windres.exe -I${CMAKE_CURRENT_SOURCE_DIR} -i${CMAKE_CURRENT_SOURCE_DIR}/win/capn.rc
                -o ${PROJECT_BINARY_DIR}/rc_capn.obj )
        LIST(APPEND SOURCE_FILES rc_capn.obj)
    ELSE(MINGW)
		LIST(APPEND APN_SOURCE_FILES win/capn.rc)
	ENDIF(MINGW)
	
	FILE (GLOB OPENSSL_HEADER_FILES ${CMAKE_CURRENT_SOURCE_DIR}/win/thirdparty/openssl/include/openssl/*.h)
	INSTALL(FILES ${OPENSSL_HEADER_FILES} DESTINATION ${APN_INSTALL_PATH_HEADERS}/openssl)

	INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/win/thirdparty/openssl/include")
    SET(OPENSSL_LIBRARIES "${CMAKE_CURRENT_SOURCE_DIR}/win/thirdparty/openssl/lib/ssleay32.lib")

    CONFIGURE_FILE(win/createpkg.bat.cmake win/createpkg.bat)

    INSTALL(FILES
          ${CMAKE_CURRENT_SOURCE_DIR}/win/thirdparty/openssl/bin/ssleay32.dll
          ${CMAKE_CURRENT_SOURCE_DIR}/win/thirdparty/openssl/bin/libeay32.dll
          DESTINATION ${APN_INSTALL_PATH_BIN})
    INSTALL(FILES
          ${CMAKE_CURRENT_SOURCE_DIR}/README.md
          ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE
          DESTINATION ${APN_INSTALL_DIR})
    	ADD_CUSTOM_TARGET(zip COMMAND ${PROJECT_BINARY_DIR}/win/createpkg.bat)
ENDIF(DEFINED WIN32)

ADD_LIBRARY(${APN_LIB_NAME} SHARED ${APN_SOURCE_FILES})
TARGET_LINK_LIBRARIES(${APN_LIB_NAME} ${OPENSSL_LIBRARIES})

IF(DEFINED WIN32)
TARGET_LINK_LIBRARIES(${APN_LIB_NAME} Ws2_32.lib)
ENDIF(DEFINED WIN32)

SET_TARGET_PROPERTIES(${APN_LIB_NAME} PROPERTIES
    VERSION ${APN_VERSION} SOVERSION ${APN_VERSION_MAJOR}
    CLEAN_DIRECT_OUTPUT 1	# for cmake 2.6.x and lower
)
ADD_DEPENDENCIES(${APN_LIB_NAME} jansson)

INSTALL(TARGETS ${APN_LIB_NAME}
         RUNTIME DESTINATION ${APN_INSTALL_PATH_BIN}
         LIBRARY DESTINATION ${APN_INSTALL_PATH_LIB}
         ARCHIVE DESTINATION ${APN_INSTALL_PATH_LIB}
)

INSTALL(FILES ${APN_PUBLIC_HEADER_FILES} DESTINATION ${APN_INSTALL_PATH_HEADERS})

INCLUDE_DIRECTORIES (${CMAKE_CURRENT_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES (${CMAKE_CURRENT_SOURCE_DIR})

MESSAGE(STATUS "Project: ${PROJECT_NAME}")
MESSAGE(STATUS "Cmake version: ${CMAKE_VERSION}")
MESSAGE(STATUS "System: ${CMAKE_SYSTEM}")
MESSAGE(STATUS "Processor:  ${CMAKE_HOST_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "Using CFLAGS: ${CMAKE_C_FLAGS}")

