/**
 * @defgroup apn Apple Push Notification Service
 * Apple Push Notification Service
 * 
 * @details Apple Push Notification service (APNs for short) transports and routes a notification from a given provider to a given 
 * device. A notification is a short message consisting of two major pieces of data: the device token and the \ref payload "payload". 
 * 
 * The device token is analogous to a phone number; it contains information that enables APNs to locate the device on 
 * which the client application is installed. APNs also uses it to authenticate the routing of a notification. 
 * 
 * @attention The Apple is not guarantee delivery, you should not depend on the remote-notifications facility 
 * for delivering critical data to an application via the payload. And never include sensitive data in the payload. 
 * 
 * The payload specifies how the user of an application on a device is to 
 * be alerted.
 * 
 * To establish secure connection from APNs uses SSL certificate and private key. The SSL certificate required for these connections 
 * is provisioned through the iOS Provisioning Portal. 
 * 
 * @note To establish a TLS session with APNs, an Entrust Secure CA root certificate must be installed on the 
 * provider’s server. If on your systems the certificate is not available, you can download this certificate 
 * from the Entrust SSL Certificates  <a href="http://www.entrust.net">website</a>.
 * 
 * @attention You should also retain connections with APNs across multiple notifications. 
 * APNs may consider connections that are rapidly and repeatedly established and torn down as a 
 * denial-of-service attack. Upon error, APNs closes the connection on which the error occurred.
 *
 * __Example:__
 * @include example.c
 * 
 * @sa <a href="http://developer.apple.com/library/mac/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/ApplePushService/ApplePushService.html#//apple_ref/doc/uid/TP40008194-CH100-SW9">Apple Push Notification Service</a> for more information
 * @{
 * 
 *
 * @defgroup feedback Feedback Service 
 * Feedback Service
 * 
 * @details If you attempts to deliver a push notification to an application, but the application 
 * no longer exists on the device, the device reports that fact to Apple Push Notification Service. 
 * This situation often happens when the user has uninstalled the application. If a device reports 
 * failed-delivery attempts for an application, APNs needs some way to inform to you so that it 
 * can refrain from sending notifications to that device. Doing this reduces unnecessary message 
 * overhead and improves overall system performance.
 * 
 * For this purpose Apple Push Notification Service includes a feedback service that APNs continually 
 * updates with a per-application list of devices for which there were failed-delivery attempts.
 * 
 * @warning You should periodically query the feedback service to get the list of device tokens for their 
 * applications, each of which is identified by its topic. Then, after verifying that the 
 * application hasn’t recently been re-registered on the identified devices, you should 
 * stop sending notifications to these devices.
 *
 * __Example:__
 * @include feedback.c 
 * 
 * @{@}
 *
 * @defgroup payload Notification Payload
 * Notification Payload
 * 
 * @details Each push notification carries with it a payload. The payload specifies how users are to be alerted to the 
 * data waiting to be downloaded to the client application. 
 * 
 * @attention The maximum size allowed for a notification payload 
 * is 256 bytes.
 * 
 * The payload contains one or more properties that specify the following actions:
 * - An alert message to display to the user
 * - A number to badge the application icon with
 * - A sound to play
 * - A custom properties
 * 
 * @attention The alert messsage is required.
 * 
 * You can specify custom payload values. You should not include customer information as custom payload data. Instead, 
 * use it for such purposes as setting context (for the user interface) or internal metrics.
 * 
 * 
 * @sa <a href="http://developer.apple.com/library/mac/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/ApplePushService/ApplePushService.html#//apple_ref/doc/uid/TP40008194-CH100-SW1">The Notification Payload</a> for more information
 *  
 * @{@}
 * @}
 */

/** 
 * @defgroup errors Error Handling
 * Error Handling
 * 
 * @details libcapn uses an ::apn_error structure to pass error information to the caller. 
 * 
 * If the call succeeded, the contents of error are generally left unspecified.  The normal use 
 * of apn_error is to allocate it on the stack, and pass the pointer to a function.
 * 
 * 
 * Example code:
 * 
 * @code{.c}
 * int main() {
 *     apn_error error;
 *     apn_ctx_ref ctx = NULL;
 * 
 *     ...
 * 
 *     if(apn_init(&ctx, &error) == APN_ERROR){
 *       printf("%s: %d\n", error.message, error.code);
 *       return 1;
 *     }
 * 
 *     ...
 * }
 * @endcode
 * 
 * @{@}
 */

/**
 * @defgroup version Library version
 * Library version
 * 
 * Library version is of the form X.Y.Z, where X is the major version, Y is the minor version and 
 * Z - patch version. When a new release only fixes bugs, the patch version is incremented, major 
 * and minor versions isn't changes.
 * 
 * When new features are added in a backwards compatible way, the minor version is incremented and 
 * patch version is set to zero, major virsion isn't changes.
 * 
 * When there are backwards incompatible changes, the major version is incremented and others are set 
 * to zero.
 * @{@}
 */

 